package dat3.car.service;

import dat3.car.dto.CarRequest;
import dat3.car.dto.CarResponse;
import dat3.car.entity.Car;
import dat3.car.repository.CarRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;
import org.springframework.web.server.ResponseStatusException;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class CarServiceMockitoTest {

  @Mock
  CarRepository carRepository;

  @InjectMocks
  CarService carService;

  private Car car1;
  private Car car2;

  @BeforeEach
  void setUp() {
    //Observe how we set the id here, which otherwise would be generated by the database
    car1 = Car.builder().id(1).brand("Audi").model("A4").pricePrDay(100000).bestDiscount(10).build();
    car2 = Car.builder().id(2).brand("BMW").model("M3").pricePrDay(200000).bestDiscount(20).build();
    car1.setCreated(LocalDateTime.now());
    car2.setCreated(LocalDateTime.now());
  }

  @Test
  void getCars() {
    //Setup mock data
    when(carRepository.findAll()).thenReturn(List.of(car1, car2));

    //Two test in one. Not best practice, but better this way than not testing at all
    List<CarResponse> carsAdmin = carService.getCars(true);
    assertEquals(2, carsAdmin.size());
    assertNotNull(carsAdmin.get(0).getCreated());

    List<CarResponse> carsUser = carService.getCars(false);
    assertEquals(2, carsUser.size());
    assertNull(carsUser.get(0).getCreated());
  }

  @Test
  void findCarById() {
    //Setup mock data
    when(carRepository.findById(1)).thenReturn(java.util.Optional.of(car1));

    //Two tests in one. Not best practice, but better this way than not testing at all
    CarResponse carSeenByUser = carService.findCarById(1,false);
    assertEquals("Audi", carSeenByUser.getBrand());
    assertNull(carSeenByUser.getCreated());

    CarResponse carSeenByAdmin = carService.findCarById(1,true);
    assertEquals("Audi", carSeenByAdmin.getBrand());
    assertNotNull(carSeenByAdmin.getCreated());
  }

  @Test
  void findNonExistingCarById() {
    //Setup mock data
    when(carRepository.findById(11)).thenReturn(Optional.empty());
    assertThrows(ResponseStatusException.class,()->carService.findCarById(11,true));
  }


  @Test
  void addCar() {
    //Setup mock data
    CarRequest carRequest = CarRequest.builder().brand("Audi").model("A4").pricePrDay(100000).bestDiscount(10).build();
    Car newCar = CarRequest.carFromCarRequest(carRequest);
    newCar.setId(1);
    newCar.setCreated(LocalDateTime.now());
    // when(carRepository.save(eq(newCar))).thenReturn(newCar);
    when(carRepository.save(any(Car.class))).thenReturn(newCar);

    CarResponse response = carService.addCar(carRequest);
    assertEquals(1, response.getId());
    assertEquals("Audi", response.getBrand());
    assertNotNull(response.getCreated());
    assertNotNull(response.getBrand());
  }

  @Test
  void editCar() {
    //Setup mock data
    CarRequest carEditRequest = CarRequest.builder().brand("xx").model("yy").pricePrDay(car1.getPricePrDay()).bestDiscount(0).build();

    Car car1Edited  = Car.builder().id(car1.getId()).brand("xxx").model("yyy").pricePrDay(car1.getPricePrDay()).bestDiscount(car1.getBestDiscount()).build();
    when(carRepository.findById(1)).thenReturn(java.util.Optional.of(car1));
    when(carRepository.save(any(Car.class))).thenReturn(car1Edited);

    CarResponse response = carService.editCar(carEditRequest,1);
    assertEquals(1, response.getId());
    assertEquals("xxx", response.getBrand());
    assertEquals("yyy", response.getModel());
  }

  //@Test
  void setPrice() {}

  //@Test
  void setDiscount() {}

  @Test
  void deleteCar() {
    //Setup mock data
    when(carRepository.existsById(car1.getId())).thenReturn(true);
    doNothing().when(carRepository).deleteById(car1.getId());

    //Here comes the test
    ResponseEntity<Boolean> response = carService.deleteCar(1);
    assertTrue(response.getBody());
  }
  @Test
  void deleteNonExistingCarThrows() {
    //Setup mock data
    when(carRepository.existsById(car1.getId())).thenReturn(false);
    assertThrows(ResponseStatusException.class,()->carService.deleteCar(1));
  }
}
